#!/usr/bin/env bash
set -e
set -o pipefail

print_usage() {
    echo "USAGE"
    echo "  gh get-repos <owner> [options]"
    echo ""
    echo "ARGUMENTS"
    echo "  <owner>           The owner of the repositories to get/list"
    echo ""
    echo "FLAGS"
    echo "  --dry-run         Prints the names of the repositories to be cloned or  [flag]"
    echo "                    updated, but does not actually clone or update them."
    echo "  --help, -h        Prints this help message                              [flag]"
    echo ""
    echo "OPTIONS"
    echo "  --language, -l    Limit repositories to those where the primary coding  [string]"
    echo "                    language matches this value"
    echo "  --max-repos, -m   Limit the number of repositories returned by the API  [integer]"
    echo "                    to the value specified"
    echo "  --path, -p        Location where the repositories will be stored after  [string]"
    echo "                    cloning or updating"
    echo "  --sleep, -s       Sleep the specified number of seconds before issuing  [integer]"
    echo "                    the next clone/update command. This can be useful in"
    echo "                    mitigating anti-DDOS and rate-limiting mechanisms."
    echo "  --topic, -t       Limit repositories to those where one of the topics   [string]"
    echo "                    matches this value"
    echo ""
    echo "EXAMPLES"
    echo ""
    echo "  $ gh get-repos jrmash"
    echo "  $ gh get-repos jrmash --dry-run"
    echo "  $ gh get-repos jrmash --language hcl"
    echo "  $ gh get-repos jrmash --topic terraform"
    echo ""
}

declare EXT_OPT_DRY_RUN=false
declare EXT_OPT_SLEEP=0

declare -a GH_CMD=("gh" "repo" "list")
declare GH_CMD_OPT_LANGUAGE=""
declare GH_CMD_OPT_LIMIT=10000
declare GH_CMD_OPT_TOPIC=""
declare GH_OWNER="$(gh api user --jq '.login')"

## Process the command line arguments and options
while [ "${1}" != "" ]; do
    case "${1}" in
        --help | -h )
            print_usage && exit 0;;

        ## Options passed directly through to `gh repo list`
        --language | -l )
            shift && GH_CMD_OPT_LANGUAGE="${1}";;
        --max | -m )
            shift && GH_CMD_OPT_LIMIT="${1}";;
        --topic | -t )
            shift && GH_CMD_OPT_TOPIC="${1}";;
        
        ## Options providing additional behavior for the extension
        --dry-run )
            EXT_OPT_DRY_RUN=true;;
        --path | -p )
            shift && mkdir -p "${1}" && cd "${1}";;
        --sleep )
            shift && EXT_OPT_SLEEP="${1}";;
        
        ## The remaining command line argument should be the owner
        [a-zA-Z0-9-_]* )
            GH_OWNER="${1}";;
    esac
    shift
done

## Generate and execute the 'gh repo list' command to query the GitHub API for a
## list of repositories in the specified owner's namespace that match the search
## filters provided.
declare GH_CMD=("gh" "repo" "list" "${GH_OWNER}" "--limit" "${GH_CMD_OPT_LIMIT}")

if [ "${GH_CMD_OPT_LANGUAGE}" != "" ]; then
    GH_CMD+=("--language" "${GH_CMD_OPT_LANGUAGE}")
fi
if [ "${GH_CMD_OPT_TOPIC}" != "" ]; then
    GH_CMD+=("--topic" "${GH_CMD_OPT_TOPIC}")
fi
GH_CMD+=("--jq" ".[].nameWithOwner")
GH_CMD+=("--json" "nameWithOwner")

declare -a REPOS=()
while IFS= read -r entry; do
    REPOS+=("${entry}")
done <<< "$("${GH_CMD[@]}")"

## Iterate the list of repositories generated above and either print the list to
## the terminal or use the list to clone and/or update each found repository. If
## the '--path' option was specified, that's where the repositories will reside,
## otherwise the current working directory will be used.
printf "%s\n" "$(tput setaf 4)Found ${#REPOS[@]} repositories in @${GH_OWNER}$(tput sgr 0)"
if  [ "${EXT_OPT_DRY_RUN}" == true ]; then
    printf "%b\n" "$(tput setaf 3)" "${REPOS[@]/#/>> }" "$(tput sgr 0)"
else
    set +e
    
    for repo in "${REPOS[@]}"; do
        printf "\n%s\n" "$(tput setaf 3)>> Processing '${repo}' repository$(tput sgr 0)"
        repo_dir=${repo#"${GH_OWNER}"/}

        if [ -d "${repo_dir}" ]; then
            default_branch="$(gh api "repos/${repo}" -q '.default_branch')"

            git -C "${repo_dir}" checkout "${default_branch}"
            git -C "${repo_dir}" pull
        else
            gh repo clone "${repo}"
        fi
        
        ## 03/01/2022: Over the past few weeks, the extension started throwing a
        ## "connection reset" error, which was originally suspected to be a rate
        ## limiting mechanism employed by GitHub. This has since been determined
        ## to be a network protection system enabled on the user's work machine,
        ## so this "sleep" option was added to allow users to slow down the rate
        ## at which commands are executed. The user that originally reported the
        ## issue has since been able to use this without issue.
        sleep "${EXT_OPT_SLEEP}"
    done
    echo ""
fi
